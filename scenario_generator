#!/usr/bin/env python

import argparse
import sys
import json
import yaml
from factory.production import Bakery


def get_params(config_file):
    file_stream = open(config_file, 'r')
    params = yaml.load(file_stream)
    return params


def main(filename="random", verbose=False):
    dest = "scenarios/%s-scenario.json" % filename

    scenario_params = get_params('config/scenarios.yaml')[filename]
    products = get_params('config/products.yaml')
    client_params = get_params('config/customers.yaml')

    bakeries_qty = scenario_params['meta']['bakeries']
    clients_qty = sum(scenario_params['meta']['customers'].values())
    grid = scenario_params['street_network']['grid_size']
    days = scenario_params['meta']['days']

    oven_id = 1
    machine_id = 1
    table_id = 1
    bakery_list = []

    # Create bakery names
    bakeries_names = get_params('config/bakeries.yaml')

    # Generate bakeries
    print("\nCreating bakeries....")

    bakery_params = scenario_params['bakeries']
    product_params = scenario_params['products']
    machine_params = bakery_params['kneading_machines']
    table_params = bakery_params['dough_prep_tables']


    for n in range(bakeries_qty):
        bakery = Bakery(n+1, bakeries_names[n],
                        products=products, product_params=product_params)

        oven_id = bakery.add_ovens(start_id=oven_id,
                                   params=bakery_params['ovens'])

        machine_id = bakery.add_kneading_machines(machine_id, machine_params)

        table_id = bakery.add_prep_tables(table_id, table_params)


        bakery_list.append(bakery)



if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Creates a random scenario')

    parser.add_argument('--name',
                        nargs=1,
                        help='The scenario name.')
    parser.add_argument('--verbose',
                        action='store_true',
                        default=False,
                        help='Show the details of the scenario while they are\
                              created')
    args = parser.parse_args(sys.argv[1:])
    try:
        main(verbose=args.verbose)
    except ValueError as vae:
        parser.error(str(vae))
